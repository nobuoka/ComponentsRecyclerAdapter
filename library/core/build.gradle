evaluationDependsOn(parent.path)
apply plugin: 'com.android.library'

ext.artifactIdSuffix = 'core'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        // See: https://developer.android.com/intl/ja/tools/testing-support-library/index.html#setup
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile 'com.android.support:recyclerview-v7:23+'
    testCompile 'junit:junit:4.12'

    androidTestCompile 'com.google.guava:guava:19.0'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.android.support:recyclerview-v7:23.1.1'
    // Testing Support Library
    // See: https://developer.android.com/intl/ja/tools/testing-support-library/index.html#setup
    androidTestCompile('com.android.support.test:runner:0.4.1') {
        exclude module: 'support-annotations'
    }
    // Set this dependency to use JUnit 4 rules
    androidTestCompile('com.android.support.test:rules:0.4.1') {
        exclude module: 'support-annotations'
    }
}

android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        def javadocTask = task("javadoc${variant.name.capitalize()}", type: Javadoc) {
            description "Generates Javadoc for ${variant.name}."

            //source = variant.javaCompile.source
            // From https://github.com/bintray/bintray-examples/blob/master/gradle-aar-example/build.gradle
            source = android.sourceSets.main.java.srcDirs // Not good because it doesn't include product-flavor-specific source codes.

            //destinationDir = reporting.file("${variant.name}-docs")

            //ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            //classpath = files(variant.javaCompile.classpath.files)// + files(ext.androidJar)
            // From https://github.com/bintray/bintray-examples/blob/master/gradle-aar-example/build.gradle
            classpath = files(variant.javaCompile.classpath.files) + project.files(android.getBootClasspath().join(File.pathSeparator))
        }
        def javadocJarTask = task("javadocsJar${variant.name.capitalize()}", type: Jar, dependsOn: javadocTask) {
            classifier = "javadoc"
            from javadocTask.destinationDir
        }
        def sourcesJarTask = task("sourcesJar${variant.name.capitalize()}", type: Jar) {
            classifier = "sources"
            from variant.javaCompile.source
        }

        /* artifacts management.
         * See: http://www.gradle.org/docs/current/userguide/artifact_management.html */
        artifacts {
            archives javadocJarTask
            archives sourcesJarTask
        }
    }
}
